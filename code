#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct appointment{
    int id_Dr ;
    int id_pat;
    int idapp ;
    float times;
    struct appointment*nx;
    char name [20];
}app;
typedef struct DR{
     char name[20];
     char specialization[20];
    int ID ;
    struct DR*nx;    
    app * appointments;
    int id_special;
}DR;
DR *list_dr =NULL;
typedef struct patient{
    app * appointments;
    char name [20];
    int ID    ;
    struct patient*nx;
    int id_appointment;
}patient;
patient*list_patient=NULL;
void print_info_dr(int iddr);
void print_info_patient(int idp);
void print_info_appo(DR* DRdr);
void print_info_spcial(int idspecial);
DR * search_dr(int iddr);
app*search_Appointment(int iddr,int id_App); 
patient*search_patient(int idpat);
void add_patient(int IDp,const char namep[20]);
void add_appointment(int IDp,int ID_drrr,const char namep[20],float times);
void add_dr(int IDp,const char namep[20],int id_special,const char specialization[20]);
void delete_appointmentfromdr(int id_App,int iddr);
void reservation(int id_App,int iddr,int idpat);
void delete_reservationpat(int idpat);
void change_reservation(int idpat);
void delete_account(idpat);
void add_all_doctors() {
    // Example of adding doctors
    //add_dr(1, "Dr. Smith", 1, "Cardiology");
    add_dr(1,"mahammed",1,"Cardiology");
    add_dr(2,"jack",1,"Cardiology");
    add_dr(3,"max",1,"Cardiology");
    add_dr(4,"ali1",2,"Neurology");
    add_dr(5,"ali2",2,"Neurology");
    add_dr(6,"poi",2,"Neurology");
    add_dr(7,"mona",3,"ENT (Ear, Nose, and Throat)");
    add_dr(8,"d",3,"ENT (Ear, Nose, and Throat)");
    add_dr(9,"ehklld",3,"ENT (Ear, Nose, and Throat)");
    add_appointment(1,1,"Sunday",10.30);
    add_appointment(2,1,"Monday",10.30);
    add_appointment(1,2,"Monday",11.30);
    add_appointment(2,2,"Monday",12);
    add_appointment(1,3,"Monday",9);
    add_appointment(1,4,"saturday",8);
    add_appointment(2,4,"Monday",8);
    add_appointment(1,5,"Sunday",9);
    add_appointment(3,5,"Wednesday",9);
    add_appointment(2,5,"Tuesday",9);
    add_appointment(3,6,"Monday",1);
    add_appointment(1,7,"Sunday",2);
    add_appointment(2,7,"Wednesday",10);
    add_appointment(1,8,"thursday",9);
    add_appointment(2,8,"thursday",11);    
}
void main (void){
   int choice;
    int idDr, idPatient, idAppointment, spec;
    char name[20];
add_all_doctors();
    // Initially populate the list of doctors and appointments

    while (1) {
        printf("\nAre you a 1_Admin or 2_User? Enter 0 to exit.\n");
        scanf("%d", &choice);

        if (choice == 0) {
            break;  // Exit the loop and end the program
        }

        switch (choice) {
            case 1:  // Admin mode
                printf("Admin Functions:\n");
                printf("1. Add Doctor\n2. Delete Doctor\n3. View Specializations\n");
                scanf("%d", &choice);
                switch (choice) {
                    case 1:
                        int IDp,times;
                        printf("Enter Doctor ID, Name, Specialization ID, and Specialization:\n");
                        scanf("%d %s %d %s", &idDr, name, &spec, name);
                        add_dr(idDr, name, spec, name);  // Assuming name is used for both name and specialization
                        printf("Enter oppointment ID, Name, times\n");
                        scanf("%d %s %d ", &IDp, name,&times);
                        add_appointment(IDp,idDr,name,times);
                 
                        break;
                    case 2:
                        printf("Enter Doctor ID to delete:\n");
                        scanf("%d", &idDr);
                        delete_account(idDr);
                        break;
                    case 3:
                        print_info_spcial(1); 
                        print_info_spcial(2);
                        print_info_spcial(3); 
                        break;
                    default:
                        printf("Invalid choice.\n");
                        break;
                }
                break;

            case 2:  // User mode
                printf("Enter your name and ID: ");
                scanf("%s %d", name, &idPatient);
                // Check if patient is registered
                if (search_patient(idPatient) != NULL) {
                    printf("Welcome back, %s!\n", name);
                    print_info_patient(idPatient);
                    printf("Do you want to 1_change_reservation or 2_delete_account?\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                    change_reservation(idPatient);
                } 
                    
                else if (choice == 2) {
                    delete_account(idPatient);
                }        
                } 
                
                else {
                    printf("New patient! Adding to system...\n");
                    add_patient(idPatient, name);
                    printf("\nAvailable specializations:\n1_Cardiology 2_Neurology 3_ENT\n");
                printf("Which specialization do you need? ");
                scanf("%d", &spec);
                print_info_spcial(spec);
                printf("Enter the ID of the doctor you choose: ");
                scanf("%d", &idDr);
                printf("Enter the ID of the appointment you choose: ");
                scanf("%d", &idAppointment);
                reservation(idAppointment, idDr, idPatient);
                print_info_patient(idPatient);
                printf("Do you want to 1_change_reservation or 2_delete_account?\n");
                scanf("%d", &choice);
                if (choice == 1) {
                    change_reservation(idPatient);
                } else if (choice == 2) {
                    delete_account(idPatient);
                }   
                }
                break;
                     default:
                printf("Invalid option. Please try again.\n");
                break;
        }
    }

      
       } 
void add_dr(int IDp, const char namep[20], int id_special, const char specialization[20]) {
    DR* temp = (DR*) malloc(sizeof(DR));
   // Initialize array members to zero
    memset(temp->name, 0, sizeof(temp->name));
    memset(temp->specialization, 0, sizeof(temp->specialization));
        
        strncpy(temp->name, namep, sizeof(temp->name) - 1);
        strncpy(temp->specialization,specialization, sizeof(temp->specialization) - 1);
    // Initialize the new node with given parameters
    temp->ID = IDp;
    temp->id_special = id_special;
    temp->nx = NULL;
   // Correct the assignment to check for NULL using '=='
    if (list_dr == NULL) {
        list_dr = temp;
    } else {
        DR* last = list_dr;
        while (last->nx != NULL) {
            last = last->nx;
        }
        last->nx = temp;
    }
}
void print_info_dr(int iddr){
    DR*tempdr=(DR*)search_dr(iddr);
    printf("\nthe name of ductor : %s \nID : %d\n",tempdr->name,tempdr->ID);
    printf("the specialization :%s\n",tempdr->specialization);
    print_info_appo(tempdr);
}
void print_info_patient(int idp){
    patient*tempp=(patient*)search_patient(idp);
    DR*tempdr=(DR*)search_dr(tempp->appointments->id_Dr);
    printf("hello : %s \nID : %d\n",tempp->name,tempp->ID);
    printf("your reservation is in %s ,with DR/\" %s \"\n",tempdr->specialization,tempdr ->name);
    printf("in the day : %s\nthe time : %.2f",tempp->appointments->name,tempp->appointments->times);
}
DR * search_dr(int iddr){
    if(list_dr->ID==iddr){
        return list_dr;
    }
    else{
        DR* last=list_dr;
        while(last -> nx->ID!=iddr){
            last=last ->nx;
    }
    return last ->nx;
}
    
}
void print_info_appo(DR* DRdr){
    if(DRdr->appointments==NULL){
        printf("there is no appointments here");
    }
    else{
        printf("the appointments: \n%d_%s\n%.2f h",DRdr ->appointments->idapp,DRdr ->appointments->name,DRdr ->appointments->times);
        app *last=DRdr ->appointments;
        while(last ->nx!=NULL){
            printf("\n\n");
            printf("\n%d_%s\n%.2f h",last->nx->idapp,last->nx->name,last->nx->times);
            last=last ->nx;        }
            }
}
void add_appointment(int IDp,int ID_drrr, const char namep[20],float times){
    app* temp=(app*)malloc(sizeof(app));
    strcpy(temp ->name,namep);
    temp ->idapp=IDp;
    temp ->times=times;
    temp ->id_Dr=ID_drrr;
    temp ->nx=NULL;
    DR* temp_dr=(DR *)search_dr(ID_drrr);
    if(temp_dr->appointments==NULL){
         temp_dr->appointments=temp;
     }
     else{
         app* last=temp_dr->appointments;
         while(last ->nx!=NULL){
             last =last -> nx;
         }
         last ->nx=temp;
     } 
}
void print_info_spcial(int idspecial){
    if(list_dr ->id_special==idspecial){
        print_info_dr(list_dr ->ID);
    }
     DR * last =list_dr;
        while(last -> nx!=NULL){
            if(last -> nx->id_special!= idspecial){
            last =last ->nx;}
            else{
            print_info_dr(last->nx ->ID);
            last =last ->nx;
            continue;  }
        
    }
    
}
patient* search_patient(int idpat) {
    patient* current = list_patient;
    while (current != NULL) {
        if (current->ID == idpat) {
            return current;  // Patient found
        }
        current = current->nx;
    }
    return NULL;  // No patient found
}
void reservation(int id_App, int iddr, int idpat) {
    DR* tempdr = (DR*)search_dr(iddr);
    patient* temppat = (patient*)search_patient(idpat);

    if (temppat == NULL) {
        printf("No patient with ID %d registered. Please register first.\n", idpat);
        return;
    }

    if (tempdr == NULL) {
        printf("No doctor with ID %d found.\n", iddr);
        return;
    }

    temppat->appointments = (app*)search_Appointment(iddr, id_App);
    delete_appointmentfromdr(id_App, iddr);
}
void delete_appointmentfromdr(int id_App,int iddr){
    DR *tempdr =(DR *)search_dr(iddr);
    if (tempdr->appointments->idapp==id_App){
        tempdr->appointments=tempdr->appointments->nx;
        tempdr->appointments->nx=NULL;
    }
    else{
        app * last =tempdr->appointments;
        while(last->nx->idapp!=id_App){
            last=last->nx;
        }
        last->nx=last->nx->nx;
        last->nx->nx=NULL;
    }
    }
app* search_Appointment(int iddr,int id_App){
    DR* tempdr=(DR*)search_dr(iddr);
    if(tempdr->appointments->idapp==id_App){
        return tempdr->appointments;}
    else{
        app * last=tempdr ->appointments;
        while(last -> nx->idapp!=id_App){
            last=last ->nx;
        }
        return last ->nx;
    }}    
void change_reservation(int idpat){
        int iddr,appointment,ch;
        printf("which specialization Do you want ? 1_ Neurology 2_ Cardiology 3_  Dentistry ");
        scanf("%d",&ch);
        print_info_spcial(ch);
        printf("which appointment suits you ,please Enter the id ");
        printf("ID of DR :");
        scanf("%d",&iddr);
        printf("ID of appointment :");
        scanf("%d",&appointment);    
        delete_reservationpat( idpat);
        reservation(appointment,iddr,idpat);
}
void delete_reservationpat(int idpat){
    patient*temp=(patient*)search_patient;
    add_appointment(temp->id_appointment,temp ->appointments ->id_Dr,temp ->appointments ->name,temp ->appointments ->times);
    temp ->appointments=NULL;
}
void delete_account(idpat){
    patient* temppat=(patient*)search_patient(idpat);
    if (list_patient->ID==temppat->ID){
        patient* delete=list_patient;
        list_patient=list_patient ->nx;
        free(delete);}
    else{
        patient* last=list_patient;
        while(last->nx->ID!=idpat){
            last=last->nx;
        }
        patient* delete=last->nx;
        last->nx=last->nx->nx;
        free(delete);
    }
}

void add_patient(int IDp, const char namep[20]) {
    if (search_patient(IDp) != NULL) {
        printf("Patient with ID %d is already registered.\n", IDp);
        return;  // Exit the function if patient already exists
    }

    // If the patient does not exist, proceed to add them
    patient* temp = (patient*)malloc(sizeof(patient));
    if (temp == NULL) {
        printf("Failed to allocate memory for new patient.\n");
        return;
    }
    memset(temp->name, 0, sizeof(temp->name));
    strncpy(temp->name, namep, sizeof(temp->name) - 1);
    temp->ID = IDp;
    temp->nx = NULL;

    if (list_patient == NULL) {
        list_patient = temp;
    } else {
        patient* last = list_patient;
        while (last->nx != NULL) {
            last = last->nx;
        }
        last->nx = temp;
    }
}


